#--------------python
class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        left, right = 0, 0
        chars = set()
        res = 0
        while left < len(s) and right < len(s):
            if s[right] in chars:
                if s[left] in chars:
                    chars.remove(s[left])
                left += 1
            else:
                chars.add(s[right])
                right += 1
                res = max(res, len(chars))
        return res


#--------------C++
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        const int N = s.size();
        if (N <= 1) return N;
        unordered_set<char> set;
        int res = 0;
        int l = 0, r = 0;
        while (r < N) {
            while (set.count(s[r])) {
                set.erase(s[l]);
                ++l;
            }
            set.insert(s[r]);
            res = max(res, int(set.size()));
            ++r;
        }
        return res;
    }
};


#--------------C#
 public class Solution
    {
        public int LengthOfLongestSubstring(string s)
        {
            var charArray = s.ToCharArray();

            var longestWord = new Dictionary<char, int>();
            var index = 0;
            var lastLongestWordLength = 0;

            while (index < charArray.Length)
            {
                var c = charArray[index];

                if (longestWord.ContainsKey(c))
                {
                    lastLongestWordLength = Math.Max(lastLongestWordLength, longestWord.Count);
                    index = longestWord[c];
                    longestWord.Clear();
                }
                else
                {
                    longestWord.Add(c, index);
                }

                index++;
            }

            return Math.Max(lastLongestWordLength, longestWord.Count);
        }
    }
