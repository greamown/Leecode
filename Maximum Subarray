#--------------python
class Solution:
    def maxSubArray(self, nums: 'List[int]') -> 'int':
        l = len(nums)
        if l == 0: return 0
        res = now = nums[0]
        for i in range(1, l):
            if now > 0:
                now += nums[i]
            else:
                now = nums[i]
            
            if now > res:
                res = now
        return res
        
#--------------C#
public class Solution {
    public int MaxSubArray(int[] nums) {
        int length = nums.Length;
        if (length == 0) {
            return 0;
        }
        
        int globalMax = nums[0];
        int localMax = nums[0];
        
        for (int i = 1; i < length; ++i) {
            localMax = Math.Max(nums[i], localMax+nums[i]);    
            globalMax = Math.Max(localMax, globalMax);
        }
        
        return globalMax;
    }
}  

#--------------C++
class Solution {
public:
	int maxSubArray(vector<int> &nums) {
		vector<int> dp(nums.size(),0);
		dp[0] = nums[0];
		int res = dp[0];
		for (int i = 1; i < nums.size(); i++)
		{
			dp[i] = max(dp[i - 1] + nums[i], nums[i]);
			if (dp[i]>res) res = dp[i];
		}
		return res;
	}
};
