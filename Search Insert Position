#--------------python
class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        small, big = 0,len(nums)-1
        mid = (small+big)//2
        while small <= big:
            if nums[mid] == target:
                return mid
            elif nums[mid] > target:
                big = mid -1
            else:
                small = mid +1
            
            mid = (small+big)//2
            
        return small


#--------------C++
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        for (int i = 0; i < nums.size() ; ++i){
            if(nums[i] >= target) return i;
        }
        return nums.size();
    }
};


#--------------C#
public class Solution {
    public int SearchInsert(int[] nums, int target) {
    var fri = 0;
    var las = nums.Length-1;
    while(fri <= las){
        var mid = (fri-las)/2+las;
        
        if(nums[mid] == target){
            return mid;
        }
        else if(nums[mid] < target){
            las = mid+1;
        }
        else{
            fri = mid-1;
        }
    }
        return las;
    }
    
}
